require 'temppath/version'
require 'uuidtools'
require 'pathname'
require 'tmpdir'
require 'fileutils'

# Temppath creates temporary path. The differences from standard tempfile.rb are
# that this library generates Pathname objects with no files and filenames are
# based on UUID. Files in paths generated by this are deleted when Ruby exits.
#
# @example
#   path = Temppath.create
#   #=> #<Pathname:/tmp/ruby-temppath-20130407-5775-w5k77l/f41bd6c5-fc99-4b7a-8f68-95b7ae4a6b22>
#   path.exist? #=> false
module Temppath
  class << self
    # @return [Pathname]
    #   defalut temporary directory for paths created by Temppath
    attr_reader :dir

    # @return [Boolean]
    #   true if unlink mode is enabled
    attr_accessor :unlink

    # Create a temporary path. This method creates no files.
    #
    # @param basename [String]
    #   prefix of filename
    # @param tmpdir [Pathname]
    #   pathname of temporary directory
    def create(basename="", tmpdir=dir)
      path = Pathname.new(tmpdir) + (basename.to_s + generate_uuid)
      if tmpdir != dir
        Kernel.at_exit {FileUtils.remove_entry_secure(path) rescue Errno::ENOENT}
      end
      return path
    end

    # Remove curren temporary directory and create a new temporary directory and
    # use it.
    #
    # @return [Pathname]
    #   new temporary directory
    def update_tempdir
      remove_tempdir
      @dir = create_tempdir
    end

    # Remove current temporary directory.
    #
    # @return [void]
    def remove_tempdir
      FileUtils.remove_entry_secure(@dir) if @dir.exist?
    end

    private

    # Create a new temporary directory.
    #
    # @return [Pathname]
    #   temporary directory
    def create_tempdir
      Pathname.new(Dir.mktmpdir("ruby-temppath-"))
    end

    # Generate random UUID for filename of temporary path.
    #
    # @return [String]
    #   UUID string
    def generate_uuid
      UUIDTools::UUID.random_create.to_s
    end
  end

  @dir = create_tempdir
  @unlink = true
end

# Remove Temppath's temporary directory.
Kernel.at_exit do
  if Temppath.unlink
    Temppath.remove_tempdir rescue Errno::ENOENT
  end
end
